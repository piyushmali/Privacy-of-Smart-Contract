// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// Import the verifier contract generated by ZoKrates
import "./verifier.sol";

contract PrivacyPreservingTransaction is Verifier {
    mapping(bytes32 => bool) public validTransactions;

    event TransactionVerified(bytes32 indexed transactionHash);

    function verifyTransaction(
        uint[2] memory a,
        uint[2][2] memory b,
        uint[2] memory c,
        uint[1] memory input
    ) public returns (bool) {
        require(verifyTx(a, b, c, input), "Invalid proof");

        bytes32 transactionHash = keccak256(abi.encodePacked(a, b, c, input));
        validTransactions[transactionHash] = true;

        emit TransactionVerified(transactionHash);
        return true;
    }

    function isTransactionValid(
        bytes32 transactionHash
    ) public view returns (bool) {
        return validTransactions[transactionHash];
    }
}
